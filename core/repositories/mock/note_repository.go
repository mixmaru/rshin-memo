// Code generated by MockGen. DO NOT EDIT.
// Source: core/repositories/note_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/mixmaru/rshin-memo/core/entities"
)

// MockNoteRepositoryInterface is a mock of NoteRepositoryInterface interface.
type MockNoteRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNoteRepositoryInterfaceMockRecorder
}

// MockNoteRepositoryInterfaceMockRecorder is the mock recorder for MockNoteRepositoryInterface.
type MockNoteRepositoryInterfaceMockRecorder struct {
	mock *MockNoteRepositoryInterface
}

// NewMockNoteRepositoryInterface creates a new mock instance.
func NewMockNoteRepositoryInterface(ctrl *gomock.Controller) *MockNoteRepositoryInterface {
	mock := &MockNoteRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockNoteRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteRepositoryInterface) EXPECT() *MockNoteRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetAllNotesOnlyName mocks base method.
func (m *MockNoteRepositoryInterface) GetAllNotesOnlyName() ([]*entities.NoteEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotesOnlyName")
	ret0, _ := ret[0].([]*entities.NoteEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotesOnlyName indicates an expected call of GetAllNotesOnlyName.
func (mr *MockNoteRepositoryInterfaceMockRecorder) GetAllNotesOnlyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotesOnlyName", reflect.TypeOf((*MockNoteRepositoryInterface)(nil).GetAllNotesOnlyName))
}

// GetByNoteName mocks base method.
func (m *MockNoteRepositoryInterface) GetByNoteName(noteName string) (*entities.NoteEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNoteName", noteName)
	ret0, _ := ret[0].(*entities.NoteEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNoteName indicates an expected call of GetByNoteName.
func (mr *MockNoteRepositoryInterfaceMockRecorder) GetByNoteName(noteName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNoteName", reflect.TypeOf((*MockNoteRepositoryInterface)(nil).GetByNoteName), noteName)
}

// GetBySearchText mocks base method.
func (m *MockNoteRepositoryInterface) GetBySearchText(text string) ([]*entities.NoteEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySearchText", text)
	ret0, _ := ret[0].([]*entities.NoteEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySearchText indicates an expected call of GetBySearchText.
func (mr *MockNoteRepositoryInterfaceMockRecorder) GetBySearchText(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySearchText", reflect.TypeOf((*MockNoteRepositoryInterface)(nil).GetBySearchText), text)
}

// Save mocks base method.
func (m *MockNoteRepositoryInterface) Save(entity *entities.NoteEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockNoteRepositoryInterfaceMockRecorder) Save(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockNoteRepositoryInterface)(nil).Save), entity)
}
